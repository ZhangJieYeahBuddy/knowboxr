usethis::use_data_raw()
library(devtools)
library(usethis)
library(desc)
source('~/Documents/Github/knowboxr/data-raw/devstuffs.R', echo=TRUE)
install.packages("attempt")
source('~/Documents/Github/knowboxr/data-raw/devstuffs.R', echo=TRUE)
source('~/Documents/Github/knowboxr/data-raw/devstuffs.R', echo=TRUE)
#' # Return a string
#' get_kv("fruit/apple")
#'
#' # Return a list of values
#' get_batch_kv("fruit", c("apple", "banana", "coconut"))
#' # This works too
#' get_batch_kv("fruit", "apple", "banana", "coconut")
#'
#' }
#'
get_kv <- function(key) {
# required paramters
params <- c("host", "port", "swagger")
# defensive
if(!all(params %in% ls(envir = consul))) {
stop("One or more Consul parameters cannot be found.")
}
# form url
url <- sprintf("http://%s:%s/%s/%s", consul$host, consul$port, consul$swagger, key)
# send request
res <- GET(url) %>% content()
# if return empty
if(!length(res) > 0) {
return(NA)
}
# extract value and decode
tryCatch(
res[[1]]$Value %>% base64decode() %>% rawToChar(),
error = function(e) { print(e); NA }
)
}
ls()
get_kv("octopus_susuan/host")
consul <- new.env()
ls(envir = consul)
consul$host <- "127.0.0.1"
consul$port <- 8500
consul$swagger <- "v1/kv/"
ls(envir = consul)
get_kv("octopus_susuan/host")
library(magrittr)
get_kv("octopus_susuan/host")
library(curl)
library(httr)
get_kv("octopus_susuan/host")
library(base64enc)
get_kv("octopus_susuan/host")
ls(envir = )
ls()
ls()
if(!"consul" %in% ls())
if(!"consul" %in% ls()) print("hello")
rm(consul)
if(!"consul" %in% ls()) print("hello")
install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
if(!"consul" %in% ls()) print("hello")
roxygen2::roxygenise()
#'
#' @importFrom DBI dbConnect
#' @export
#'
#' @examples
#' \dontrun{
#' est_mysql_conn('mysql_database')
#' est_pgres_conn('postgres_database')
#' est_mongo_conn('mongo_database')
#' }
est_some_conn <- function(db, drv) {
# required parameters to establish connection
params <- c("username", "password", "host", "port", "database")
# fetch credentials
db_config <- get_batch_kv(db, params)
# check if all required params are specified
if(!all(params %in% names(db_config))){
stop("One or more MySQL parameters is missing")
}
# est conn
c <- dbConnect(
drv,
user = db_config[["username"]],
password = db_config[["password"]],
host = db_config[["host"]],
port = as.numeric(db_config[["port"]]),
db = db_config[["database"]]
)
# return connection
return(c)
}
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
source('~/Documents/Github/knowboxr/data-raw/devstuffs.R', echo=TRUE)
devtools::check()
source('~/Documents/Github/knowboxr/data-raw/devstuffs.R', echo=TRUE)
devtools::build()
install.packages("testhat")
devtools::install_github("r-lib/testthat")
devtools::build()
install.packages("gistr")
?.
?get_kv
library(knowboxr)
?get_kv
?est_pgres_conn
?get_kv
?est_mongo_conn
library(knowboxr)
?est_mongo_conn
library(knowboxr)
?est_mongo_conn
library(knowboxr)
?est_mongo_conn
library(knowboxr)
?est_mongo_conn
